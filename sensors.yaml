#
# Configuration | YAML configuration reloading | Reload Template Entities
#

# - platform: uptime
#
#
#
# now setup via ui
# - platform: fritzbox_callmonitor
# name: FritzPhone
# host: 192.168.178.1
# username: hacallmon
# password: !secret hacallmon_password
# phonebook: 0
# prefixes:
# - '+49'
# - '06221'
# - '+496221'
#
#
#
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: processor_temperature
    - type: last_boot
    - type: load_1m
    - type: load_5m
    - type: load_15m
#
# gives a new entity after restart
#
- platform: template
  sensors:
    #
    #
    #
    solar_angle:
      friendly_name: "Sun angle"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    #
    # fake sensor
    #
    swa_fake:
      friendly_name: Fake sensor
      value_template: "off"
    #
    #
    #
    regen_heute:
      friendly_name: met.no Precipitation
      value_template: "{{ state_attr('weather.home', 'forecast')[0].precipitation }}"
#
# breaking change - moved to UI
#
#- platform: sql
#  db_url: !secret db_url
#  queries:
#    - name: DB size
#      query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / (1024*1024), 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;'
#      column: "value"
#      unit_of_measurement: MB
#
#
#
#- platform: sql
#  db_url: !secret db_url
#  queries:
#    - name: Entfeuchter Grand Total
#      query: "SELECT * FROM statistics WHERE metadata_id=103 ORDER BY id DESC LIMIT 1;"
#      column: "sum"
#      unit_of_measurement: kWh

#
#
#
- platform: template
  sensors:
    heating_differential:
      friendly_name: "Flow-Ret diff"
      unit_of_measurement: "°C"
      icon_template: "mdi:format-align-middle"
      value_template: "{{ (states('sensor.boiler_current_flow_temperature') | float(default=0) - states('sensor.boiler_return_temperature') | float(default=0)) | round(1) }}"
#
#
#
- platform: influxdb
  host: a0d7b954-influxdb
  port: 8086
  username: homeassistant
  password: !secret influxdb
  queries:
    - name: InfluxDb DB Size
      unit_of_measurement: MB
      value_template: "{{ (value | float(default=0) / 1024 /1024) | round(1) }}"
      group_function: sum
      measurement: '"monitor"."shard"'
      database: _internal
      where: "time > now() - 10s"
      field: diskBytes

#
# weather forecasts for tomorrow
#
- platform: template
  sensors:
    swaweathermetno:
      friendly_name: "Met.no Forecast condition"
      value_template: "{{ state_attr('weather.home', 'forecast')[0].condition }}"

- platform: template
  sensors:
    swaweathermetno_condition:
      friendly_name: "Met.no Forecast condition"
      value_template: "{{ state_attr('weather.home', 'forecast')[0].condition }}"

- platform: template
  sensors:
    swaweathermetno_templow:
      friendly_name: "Met.no Forecast templow"
      value_template: "{{ state_attr('weather.home', 'forecast')[0].templow }}"

- platform: template
  sensors:
    swaweathermetno_temphigh:
      friendly_name: "Met.no Forecast temphigh"
      value_template: "{{ state_attr('weather.home', 'forecast')[0].temperature }}"
#
#
#
- platform: template
  sensors:
    heating_room_0wz:
      friendly_name: "0.EG Wohnzimmer 21-22.5"
      value_template: >-
        {% if states('sensor.thermostat_hc1_current_room_temperature') | float(default=0) <= 21.0 %}
          too-cold
        {% elif states('sensor.thermostat_hc1_current_room_temperature') | float(default=0) > 22.5 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_2stefan:
      friendly_name: "2.DG Stefan 21-22"
      value_template: >-
        {% if states('sensor.multi_dg_stefan_temperature') | float(default=0) <= 21.0 %}
          too-cold
        {% elif states('sensor.multi_dg_stefan_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_1elternschlaf:
      friendly_name: "1.OG Elternschlaf 19-21"
      value_template: >-
        {% if states('sensor.multi_og_schlaf_temperature') | float(default=0) <= 19.0 %}
          too-cold
        {% elif states('sensor.multi_og_schlaf_temperature') | float(default=0) >= 21.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_1elternbad:
      friendly_name: "1.OG Elternbad 20-22"
      value_template: >-
        {% if states('sensor.multi_og_elternbad_temperature') | float(default=0) <= 20.0 %}
          too-cold
        {% elif states('sensor.multi_og_elternbad_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_1clara:
      friendly_name: "1.OG Clara 20-22"
      value_template: >-
        {% if states('sensor.multi_og_clara_temperature') | float(default=0) <= 20.0 %}
          too-cold
        {% elif states('sensor.multi_og_clara_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_1konstantin:
      friendly_name: "1.OG Konstantin 19-22"
      value_template: >-
        {% if states('sensor.multi_og_konstantin_temperature') | float(default=0) <= 19.0 %}
          too-cold
        {% elif states('sensor.multi_og_konstantin_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_2anna:
      friendly_name: "2.DG Anna 21-22"
      value_template: >-
        {% if states('sensor.multi_dg_anna_temperature') | float(default=0) <= 21.0 %}
          too-cold
        {% elif states('sensor.multi_dg_anna_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_room_0egburo:
      friendly_name: "0.EG Büro 19-22"
      value_template: >-
        {% if states('sensor.multi_eg_buro_temperature') | float(default=0) <= 19.0 %}
          too-cold
        {% elif states('sensor.multi_eg_buro_temperature') | float(default=0) >= 22.0 %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc3:
      friendly_name: "Circuit HC3 Anna,Stefan"
      value_template: >-
        {% set p0 = states('sensor.heating_room_2anna') == "too-warm" %}
        {% set p1 = states('sensor.heating_room_2anna') == "ok" %}
        {% set p2 = states('sensor.heating_room_2anna') == "too-cold" %}
        {% set p3 = states('sensor.heating_room_2stefan') == "too-warm" %}
        {% set p4 = states('sensor.heating_room_2stefan') == "ok" %}
        {% set p5 = states('sensor.heating_room_2stefan') == "too-cold" %}
        {% if (p0 or p3) %}
          too-warm
        {% elif (p2 or p5) %}
          too-cold
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc1:
      friendly_name: "Circuit HC1 Cold: EG-Büro,EG-WZ,Clara,Konstantin Warm: EG-WZ"
      value_template: >-
        {% set p0 = states('sensor.heating_room_0egburo') == "too-warm" %}
        {% set p1 = states('sensor.heating_room_0egburo') == "ok" %}
        {% set p2 = states('sensor.heating_room_0egburo') == "too-cold" %}
        {% set p3 = states('sensor.heating_room_0wz') == "too-warm" %}
        {% set p4 = states('sensor.heating_room_0wz') == "ok" %}
        {% set p5 = states('sensor.heating_room_0wz') == "too-cold" %}
        {% set p6 = states('sensor.heating_room_1clara') == "too-warm" %}
        {% set p7 = states('sensor.heating_room_1clara') == "ok" %}
        {% set p8 = states('sensor.heating_room_1clara') == "too-cold" %}
        {% set p9 = states('sensor.heating_room_1konstantin') == "too-warm" %}
        {% set p10 = states('sensor.heating_room_1konstantin') == "ok" %}
        {% set p11 = states('sensor.heating_room_1konstantin') == "too-cold" %}
        {% if (p2 or p5 or p8 or p11) %}
          too-cold
        {% elif (p3) %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc2:
      friendly_name: "Circuit HC2: Elternbad"
      value_template: >-
        {% set p0 = states('sensor.heating_room_1elternbad') == "too-warm" %}
        {% set p1 = states('sensor.heating_room_1elternbad') == "ok" %}
        {% set p2 = states('sensor.heating_room_1elternbad') == "too-cold" %}
        {% if (p2) %}
          too-cold
        {% elif (p0) %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
# wenn
# - hc1 too warm
# - hc2 ok or too warm
# - outdoor temp ge x°C
#
- platform: template
  sensors:
    heating_hc2vshc1:
      friendly_name: "Circuit HC2 vs HC1"
      value_template: >-
        {% set p0 = states('sensor.heating_hc1') == "too-warm" %}
        {% set p1 = states('sensor.heating_hc2') == "too-warm" %}
        {% set p2 = states('sensor.heating_hc2') == "ok" %}
        {% set p3 = states('sensor.thermostat_damped_outdoor_temperature') | float(default=0) >= 8.0 %}
        {% if p0 and p3 and (p1 or p2) %}
          too-warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_warmnextday:
      friendly_name: "Heating: too sunny/warm outside"
      value_template: >-
        {% set p1 = states('sensor.thermostat_damped_outdoor_temperature') | float(default=0) >= 0.0 %}
        {% set p2 = states('input_text.heating_forecast_condition') == "sunny" %}
        {% set p3 = states('input_number.heating_forecast_temperature')| float(default=0) >= states('input_number.heating_forecast_temperatureclip')|float(default=0) %}
        {% if (p1) and (p2 or p3) %}
          warm
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    gasverbrauch_zaehler:
      friendly_name: "Gaszähler"
      value_template: "{{ states('sensor.gasverbrauch')| float(default=0) + 142.250 }}"
#
#
#
- platform: template
  sensors:
    heating_daytime:
      friendly_name: "True, if during the day ie 0520-2159"
      value_template: >-
        {% set p1 = now().hour > 21 or now().hour < 5 %}
        {% if not p1 %}
          true
        {% else %}
          false
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc1_trigger:
      friendly_name: "Circuit HC1 day"
      value_template: >-
        {% set p12 = states('sensor.heating_daytime') == "true" %}
        {% if p12 %}
          {{ states('sensor.heating_hc1') }}
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc2_trigger:
      friendly_name: "Circuit HC2 day"
      value_template: >-
        {% set p12 = states('sensor.heating_daytime') == "true" %}
        {% if p12 %}
          {{ states('sensor.heating_hc2') }}
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc3_trigger:
      friendly_name: "Circuit HC3 day"
      value_template: >-
        {% set p12 = states('sensor.heating_daytime') == "true" %}
        {% if p12 %}
          {{ states('sensor.heating_hc3') }}
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc2vshc1_trigger:
      friendly_name: "Circuit hc2vshc1 day"
      value_template: >-
        {% set p12 = states('sensor.heating_daytime') == "true" %}
        {% if p12 %}
          {{ states('sensor.heating_hc2vshc1') }}
        {% else %}
          ok
        {% endif %}
#
#
#
- platform: template
  sensors:
    heating_hc2_delta:
      friendly_name: "Circuit h2 delta"
      value_template: >-
        {{ states('sensor.thermostat_hc2_target_flow_temperature')|float(default=0) - states('sensor.thermostat_hc1_target_flow_temperature')|float(default=0) }}
#
#
#
- platform: template
  sensors:
    heating_forecast_temperature:
      value_template: >-
        {{ states('input_number.heating_forecast_temperature')|float(default=0) }}
#
#
#
- platform: template
  sensors:
    heating_forecast_condition:
      value_template: >-
        {{ states('input_text.heating_forecast_condition') }}

#
# dew point calculations for basement
#
# see https://bmcnoldy.rsmas.miami.edu/Humidity.html
#
- platform: template
  sensors:
    rel_humidity:
      friendly_name: "Relative humidity outside"
      unit_of_measurement: "%"
      value_template: "{{ states('sensor.multi_og_aussen_humidity') | float(default=0) }}"
    dewpoint_outside:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.rel_humidity') | float, states('sensor.thermostat_damped_outdoor_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dewpoint_basement:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_keller_gross_humidity') | float, states('sensor.multi_keller_gross_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_delta_ok:
      value_template: "{{ states('sensor.dewpoint_basement')|float(default=0) - states('sensor.dewpoint_outside')|float(default=0) > states('input_number.dew_delta')|float(default=0) }}"
    dew_humidity_ok:
      value_template: "{{ states('sensor.multi_keller_gross_humidity')|float(default=0) > states('input_number.dew_humidity_no_fan')|float(default=0) }}"
    dew_temp_ok:
      value_template: "{{ states('sensor.multi_keller_gross_temperature')|float(default=0) > states('input_number.dew_temp_no_fan')|float(default=0) }}"
    hum_abs_basement:
      value_template: >-
        {% set h, t = states('sensor.multi_keller_gross_humidity') | float, states('sensor.multi_keller_gross_temperature') %}
        {% if not h or t == 'unknown' -%}
          'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2) }}
        {% endif %}
      unit_of_measurement: "g/m³"
      friendly_name: "Absolute humidity basement"
    dew_difference:
      unit_of_measurement: "°C"
      value_template: "{{ (states('sensor.dewpoint_basement')|float(default=0) - states('sensor.dewpoint_outside')|float(default=0)) | round(2) }}"
    #
    #
    #
    dew_eg_buro:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_eg_buro_humidity') | float, states('sensor.multi_eg_buro_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_og_schlaf:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_og_schlaf_humidity') | float, states('sensor.multi_og_schlaf_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_og_elternbad:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_og_elternbad_humidity') | float, states('sensor.multi_og_elternbad_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_og_konstantin:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_og_konstantin_humidity') | float, states('sensor.multi_og_konstantin_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_og_clara:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_og_clara_humidity') | float, states('sensor.multi_og_clara_temperature') %}
        {% if not h or t == 'unknown' -%}
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    dew_og_kinderbad:
      unit_of_measurement: "°C"
      value_template: >-
        {% set h, t = states('sensor.multi_og_kinderbad_humidity') | float, states('sensor.multi_og_kinderbad_temperature') %}
        {% if not h or t == 'unknown' -%}f
         'unknown'
        {%- else %}
        {% set t = t | float(default=0) %}
        {% set h = h | float(default=0) %}
        {{ (243.04*(log(h/100)+((17.625*t)/(243.04+t)))/(17.625-log(h/100)-((17.625*t)/(243.04+t))))|round(2) }}
        {% endif %}
    #
    #
    dew_eg_buro_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_eg_buro')|float(default=0) }}"
    dew_og_schlaf_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_og_schlaf')|float(default=0) }}"
    dew_og_elternbad_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_og_elternbad')|float(default=0) }}"
    dew_og_konstantin_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_og_konstantin')|float(default=0) }}"
    dew_og_clara_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_og_clara')|float(default=0) }}"
    dew_og_kinderbad_open_window:
      value_template: "{{ states('sensor.dewpoint_outside')|float(default=0) < states('sensor.dew_og_kinderbad')|float(default=0) }}"
    #
    # entfeuchter cycles in 30min. if this stops, the device is simply full
    #
    entfeuchter_voll:
      value_template: "{{ states('sensor.shellys_keller_entfeuchter_power')| float(default=0) >= 0.0 and states('sensor.shellys_keller_entfeuchter_power')| float(default=0) < 1.0 }}"

#
#
#
- platform: template
  sensors:
    motion_detection_maindoor:
      value_template: >-
        {% set p2, p1 = states('switch.garagecam_ftp')=='on', states('automation.send_a_camera_snapshot_when_motion_is_detected')=='on' -%}
        {% if not p1 and not p2 -%}
        0
        {% elif p1 and not p2 -%}
        1
        {% elif not p1 and p2 -%}
        2
        {% else -%}
        3
        {% endif -%}
#
#
#
# - platform: template
# sensors:
# maindoor_remaining_duration:
# value_template: >-
# {% set deadline = state_attr('input_datetime.swadatetime','timestamp') %}
# {% if (deadline - now().timestamp()) < 0 %}
# N/A
# {% else -%}
# {{ (deadline - now().timestamp()) | timestamp_custom('%Mmin %Ss', false) }}
# {% endif -%}

#
# https://www.ajfriesen.com/rain-warning-sensor-with-home-assistant/
#
- platform: rest
  name: regenradar
  scan_interval: 300
  json_attributes:
    - raintext
    - rainin30min
    - rainin60min
    - rainin120min
  resource: !secret morgenwirdes
  value_template: "{{ value_json.raintext }}"

- platform: template
  sensors:
    rrraintext:
      friendly_name: "Vorhersage"
      value_template: "{{ state_attr('sensor.regenradar', 'raintext') }}"
    rrrainin30min:
      friendly_name: "Regen in 30min"
      value_template: "{{ state_attr('sensor.regenradar', 'rainin30min') }}"
    rrrainin60min:
      friendly_name: "Regen in 60min"
      value_template: "{{ state_attr('sensor.regenradar', 'rainin60min') }}"
    rrrainin120min:
      friendly_name: "Regen in 120min"
      value_template: "{{ state_attr('sensor.regenradar', 'rainin120min') }}"

#
#
#
- platform: template
  sensors:
    gasverbrauch_forecast:
      friendly_name_template: "Gasverbrauch bis Monatsende"
      unit_of_measurement: "m³"
      value_template: >-
        {% if now().month in [1,3,5,7,8,10,12] %}
        {% set numdays=31 %} 
        {% elif now().month in [4,6,9,11] %}
        {% set numdays=30 %}
        {% elif now().month == 2 and ((now().year-2000) % 4 >0) %}
        {% set numdays=28 %}
        {% elif now().month == 2 and ((now().year-2000) % 4 == 0) %}
        {% set numdays=29 %}
        {% endif %}
        {% if now().day == 1 %}
        N/A
        {% else %}
        {{ ((
        states('sensor.gasverbrauch_monthly')| float(default=0) - 
        states('sensor.gasverbrauch_daily') | float(default=0) 
        ) / (now().day-1) | float(default=0) * numdays) | round(0)}}
        {% endif %}

# average gas usage per day last week if Monday
# average gas usage per day this week
# number of remaining days in current month
# actual calculation
- platform: template
  sensors:
    gasverbrauch_forecast2:
      friendly_name_template: "Gasverbrauch bis Monatsende"
      unit_of_measurement: "m³"
      value_template: >-
        {% if now().weekday() == 0 -%}
        {% set average=state_attr('sensor.gasverbrauch_weekly','last_period')|float(default=0)/ 7  -%}
        {% else -%}
        {% set average=(states('sensor.gasverbrauch_weekly')|float(default=0) - 
        states('sensor.gasverbrauch_daily')|float(default=0)) /
        (now().weekday())-%}
        {% endif -%}
        {% if now().month in [1,3,5,7,8,10,12] -%}
        {% set numdays=31 -%} 
        {% elif now().month in [4,6,9,11] -%}
        {% set numdays=30 -%}
        {% elif now().month == 2 and ((now().year-2000) % 4 >0) -%}
        {% set numdays=28 -%}
        {% elif now().month == 2 and ((now().year-2000) % 4 == 0) -%}
        {% set numdays=29 -%}
        {% endif -%}
        {% set remaining = numdays - now().day + 1%}
        {{ (states('sensor.gasverbrauch_monthly')|float(default=0)-
        states('sensor.gasvbrauch_daily')|float(default=0) +
        (average * remaining)) | round(0)
        }}

- platform: template
  sensors:
    entfeuchter_costs:
      friendly_name_template: "Entfeuchter Kosten/Monat"
      unit_of_measurement: "€"
      value_template: >-
        {% set daysdiff=(as_timestamp(now()) - as_timestamp('2021-9-08 00:00:00')) | timestamp_custom("%j") | float(default=0) %}
        {% set average=(states('sensor.entfeuchter_grand_total')|float(default=0) / daysdiff) | round(2) %}
        {{ (average * 0.32 * 30) | round(2) }}

#
#
- platform: template
  sensors:
    dwd_last_rainfall_friendly:
      value_template: >-
        {{ as_timestamp(states('sensor.dwd_last_rainfall')) | timestamp_custom('%A, %-d. %B') }}
- platform: template
  sensors:
    dwd_dayswithoutrain:
      friendly_name_template: "DWD Days without rain"
      value_template: >-
        {% set year=as_timestamp(states('sensor.dwd_last_rainfall')) | timestamp_custom('%Y') %}
        {% set month=as_timestamp(states('sensor.dwd_last_rainfall')) | timestamp_custom('%m') %}
        {% set day=as_timestamp(states('sensor.dwd_last_rainfall')) | timestamp_custom('%d') %}
        {% set new= year + '-' + month + '-' + day + ' 00:00:00' %}
        {% set daysdiff=(as_timestamp(now()) - as_timestamp(new)) | timestamp_custom("%j") | float(default=0) %}
        {{ (daysdiff-1) | int }}
#
#
#
- platform: template
  sensors:
    tesla_last_charging_session_kwh:
      device_class: energy
      #      state_class: measurement
      unit_of_measurement: "kWh"
      value_template: "{{ (states('sensor.tesla_last_charge_session') | float(default=0) / 1000) | round(2) }}"
#
#
#
#
- platform: filter
  name: "Silvia power avg"
  entity_id: sensor.shellys_silvia_power
  filters:
    - filter: time_simple_moving_average
      window_size: "00:03"
#
#
#
- platform: template
  sensors:
    watermeter_main:
      friendly_name: "Wasser Haus"
      unit_of_measurement: "m3"
      value_template: "{{ states('input_number.watermeter_main') | round(3) }}"
- platform: template
  sensors:
    watermeter_garden:
      friendly_name: "Wasser Garten"
      unit_of_measurement: "m3"
      value_template: "{{ states('input_number.watermeter_garden') | round(3) }}"
#
# for badge view
# 
- platform: template
  sensors:
    dwdoutdoortemp:
      friendly_name: "Outdoor"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('weather.dwd_weather_heidelberg', 'temperature') | float(default=0) | round(0) }}"
- platform: template
  sensors:
    teslarange:
      friendly_name: "Range"
      unit_of_measurement: "km"
      value_template: "{{ states('sensor.range') | float(default=0) | round(0) }}"