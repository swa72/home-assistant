###################################################################################################
## Package - Unavailable Entities Sensor
## Count and list entities with a state of unknown or unavailable
## Home Assistant v2022.5 required. See README for customization options.
## https://github.com/jazzyisj/unavailable-entities-sensor/blob/main/README.md
###################################################################################################

# REQUIRED - This is the template sensor

# grab the device id from the URL
template:
  - sensor:
      - name: "Unavailable Entities"
        unique_id: unavailable_entities
        icon: "{{ iif(states(this.entity_id)|int(-1) > 0,'mdi:alert-circle','mdi:check-circle') }}"
        state_class: measurement
        unit_of_measurement: entities
        state: >
          {% set entities = state_attr(this.entity_id,'entity_id') %}
          {{ entities|count if entities != none else none }}
        attributes:
          entity_id: >
            {% set ignore_seconds = 60 %}
            {% set ignored = state_attr('group.ignored_unavailable_entities','entity_id') %}
            {% set ignore_ts = (now().timestamp() - ignore_seconds)|as_datetime %}
            {% set entities = states
                |rejectattr('domain','in',['button','event','group','input_button','input_text','scene'])
                |rejectattr('last_changed','ge',ignore_ts)
                |rejectattr('entity_id','search','device_tracker')
                |rejectattr('entity_id','search','battery_state')
                |rejectattr('entity_id','search','internet_access')
                |rejectattr('entity_id','search','reboot')
                |rejectattr('entity_id','search','731a166f_25d1d5bb')
                |rejectattr('entity_id','search','9456b1a3_208a3c42')
                |rejectattr('entity_id','search','iphone6')
                |rejectattr('entity_id','search','boiler_dhw_')
                |rejectattr('entity_id','search','og_aussen')
                |rejectattr('entity_id','search','sensor.pool|update.pool_firmware')
                |rejectattr('entity_id','search','poolpump')
                |rejectattr('entity_id','search','light.ikea_repeater')
                |rejectattr('entity_id','search','_next_alarm|_next_reminder|_next_timer')
                |rejectattr('entity_id','search','switch.stefans_echo_dot_')
                |rejectattr('entity_id','in',device_entities('34a8863578f67244135e8b206921bce6'))
                |rejectattr('entity_id','search','sensor.browser')%}
            {% set entities =  entities|rejectattr('entity_id','in',ignored) if ignored != none else entities %}
            {{ entities|map(attribute='entity_id')|reject('has_value')|list|sort }}

# OPTIONAL - Add entities you want to ignore to this group.

group:
  ignored_unavailable_entities:
    entities:
      # old tesla stuff
      - sensor.arrival_time
      - sensor.distance_to_arrival
      - sensor.time_charge_complete
      # old watermain reader stuff
      - sensor.watermain_hostname
      - sensor.watermain_interval
      - sensor.watermain_ip
      - sensor.watermain_mac
      # old livingroom stuff
      - binary_sensor.livingroom_file_stored
      - binary_sensor.livingroom_motion
      - switch.livingroom_autofocus
      - switch.livingroom_ir_lamp
      - switch.livingroom_wiper
      # misc old stuff
      - siren.garagecam_siren
      - sensor.solcast_swahome
      - sensor.hacs
      - sensor.generic_pcl_laser_printer
      - sensor.dwd_last_rainfall_amount
      - person.tablet
      - media_player.julias_2_echo_dot
      - light.dimmable_light_3
      - climate.dg_stefan
      - binary_sensor.updater
      - sensor.stefans_ipad_battery
      # old motion sensor
      - binary_sensor.presence_62
      - number.presence_62_duration
      - sensor.lightlevel_63
      - sensor.presence_62_battery
      - person.mieter2
      - stt.home_assistant_cloud
      - binary_sensor.wintergarten_button_lock_on_device
      - binary_sensor.wintergarten_button_lock_via_ui
      - tts.home_assistant_cloud
      - sensor.cert_expiry_timestamp_swa_duckdns_org
      - sensor.stefans_ipad_battery_2
      - sensor.apple_watch_von_julia_battery
      - sensor.iphone_von_anna_3_battery

###################################################################################################
## DESCRIPTION: Detailed persistent notification message - courtesy of @ThomDietrich and @warthog9
###################################################################################################
automation:
  - id: unavailable_entities_notification
    alias: "Unavailable Entities Notification"
    description: "Create persistent notification if unavailable entities, dismiss if none."
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_entities
        attribute: entity_id
        to: ~
    condition:
      - condition: template
        alias: "Sensor state is a valid numerical value"
        value_template: >
          {{ is_number(trigger.from_state.state)
              and is_number(trigger.to_state.state) }}
    action:
      - service: persistent_notification.create
        data:
          notification_id: unavailable_entities
          title: "Unavailable Entities"
          message: >
            {% set ns = namespace(result=[]) %}
            {% for s in expand(state_attr('sensor.unavailable_entities', 'entity_id')) %}
              {% set ns.result = ns.result + [
                  device_attr(s.entity_id, "name") ~ "|" ~ device_id(s.entity_id) ~ "|- **" ~ s.name ~ "**\n"
                  ~ "  - *entity_id*: " ~ s.entity_id ~ "\n"
                  ~ "  - *state*: " ~ s.state ~ "\n"
                ]
              %}
            {% endfor %}
            {% set ns.result = ns.result | sort %}
            {% set lastdev = namespace( id="" ) %}
            {% set tarr = ns.result %}
            {% set ns.result = [] %}
            {% for item in tarr %}
              {% set dev = namespace( id="" ) %}
              {% set entity = namespace( data="" ) %}
              {% set dev.id = item.split("|")[1] %}
              {% set entity.data = item.split("|")[2] %}
              {% if lastdev.id != dev.id %}
                {% if dev.id != 'None' %}
                  {% set ns.result = ns.result + [ "**<a href=\"/config/devices/device/" ~ dev.id ~ "\">" ~ device_attr(dev.id, "name") ~ "</a>**" ] %}
                {% else %}
                  {% set ns.result = ns.result + [ "**Non-Device Entities**" ] %}
                {% endif %}
                {% set lastdev.id = dev.id %}
              {% endif %}
              {% set ns.result = ns.result + [ entity.data ] %}
            {% endfor %}
            {{ ns.result | join('\n') }}


# OPTIONAL Example automation to demonstrate how you can utilize this sensor

# automation:
#   - id: unavailable_entities_notification
#     alias: "Unavailable Entities Notification"
#     description: "Create persistent notification if unavailable entities, dismiss if none."
#     mode: restart
#     trigger:
#       - platform: state
#         entity_id: sensor.unavailable_entities
#         attribute: entity_id
#         to: ~
#     condition:
#       - condition: template
#         alias: "Sensor state is a valid numerical value"
#         value_template: >
#           {{ is_number(trigger.from_state.state)
#               and is_number(trigger.to_state.state) }}
#     action:
#       - if:
#           - condition: numeric_state
#             entity_id: sensor.unavailable_entities
#             below: 1
#         then:
#           - service: persistent_notification.dismiss
#             data:
#               notification_id: unavailable_entities
#         else:
#           - service: persistent_notification.create
#             data:
#               notification_id: unavailable_entities
#               title: "Unavailable Entities"
#               message: "{{ state_attr('sensor.unavailable_entities','entity_id')|join('\n') }}"

#           # OPTIONAL Detailed persistent notification message - courtesy of @ThomDietrich and @warthog9

#           # - service: persistent_notification.create
#           #   data:
#           #     notification_id: unavailable_entities2
#           #     title: "Unavailable Entities"
#           #     message: >
#           #       {% set ns = namespace(result=[]) %}
#           #       {% for s in expand(state_attr('sensor.unavailable_entities', 'entity_id')) %}
#           #         {% set ns.result = ns.result + [
#           #             device_attr(s.entity_id, "name") ~ "|" ~ device_id(s.entity_id) ~ "|- **" ~ s.name ~ "**\n"
#           #             ~ "  - *entity_id*: " ~ s.entity_id ~ "\n"
#           #             ~ "  - *state*: " ~ s.state ~ "\n"
#           #           ]
#           #         %}
#           #       {% endfor %}

#           #       {% set ns.result = ns.result | sort %}
#           #       {% set lastdev = namespace( id="" ) %}
#           #       {% set tarr = ns.result %}
#           #       {% set ns.result = [] %}
#           #       {% for item in tarr %}
#           #         {% set dev = namespace( id="" ) %}
#           #         {% set entity = namespace( data="" ) %}
#           #         {% set dev.id = item.split("|")[1] %}
#           #         {% set entity.data = item.split("|")[2] %}
#           #         {% if lastdev.id != dev.id %}
#           #           {% if dev.id != 'None' %}
#           #             {% set ns.result = ns.result + [ "**<a href=\"/config/devices/device/" ~ dev.id ~ "\">" ~ device_attr(dev.id, "name") ~ "</a>**" ] %}
#           #           {% else %}
#           #             {% set ns.result = ns.result + [ "**Non-Device Entities**" ] %}
#           #           {% endif %}
#           #           {% set lastdev.id = dev.id %}
#           #         {% endif %}
#           #         {% set ns.result = ns.result + [ entity.data ] %}
#           #       {% endfor %}
#           #       {{ ns.result | join('\n') }}
